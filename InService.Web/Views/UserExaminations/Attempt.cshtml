@model Examination

@{
    var farmer = (User)ViewBag.farmer;
    int count = 1;
    int population = (int)ViewBag.population;
}

@if (ViewBag.expired != null)
{
    <div class="alert alert-danger alert-dismissible mt-4" role="alert">
        <h4 class="alert-heading">Attention!</h4>
        <p>The exercise die date has already passed!</p>
        <hr>
        <p class="mb-0">Thank you.</p>
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

@if (ViewBag.done != null)
{
    <div class="alert alert-danger alert-dismissible mt-4" role="alert">
        <h4 class="alert-heading">The exercise has already been attempted!</h4>
        <p>Please note that you already attempted this exercise!</p>
        <hr>
        <p class="mb-0">Thank you.</p>
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}
@if (ViewBag.Attempts != null && ViewBag.done == null)
{
    <div class="alert alert-danger alert-dismissible mt-4" role="alert">
        <h4 class="alert-heading">Warning!</h4>
        <p>
            Please note that you have made @((int)ViewBag.Attempts) attempts on this exercise.
        </p>
        @if (((int)ViewBag.Attempts) < Model.MaxAttempts)
        {
            <p>You are left with @((Model.MaxAttempts ?? 0) - ((int)ViewBag.Attempts)) attempts</p>
        }
        <hr>
        <p class="mb-0">Thank you.</p>
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}
<div class="form-inline">
    <h3 class="font-weight-light">@Model.Type.ToEnumString() Topic: @(Model.Module?.Name ?? Model.Topic)</h3>
    @if (Model.TimeToClose.TotalSeconds > 0)
    {
        if (Model.Duration > 0 && (Model.TypeID == (int)ExaminationType.SHORT_EXERCISE || Model.TypeID == (int)ExaminationType.EXAMINATION))
        {
            <div class="form-inline ml-auto">
                <h3 class="font-weight-light">Time: </h3>
                <h3 class="font-weight-light ml-4" id="time-left"> </h3>
            </div>
        }
    }
</div>
<hr class="border-success" />
@if (Model.PaperFormatID == (int)QuestionPaperFormat.LIST_FORMAT)
{
    <div class="qns">
        @using (Html.BeginForm("Attempt", "UserExaminations", FormMethod.Post, new { id = "myForm" }))
        {
            @Html.AntiForgeryToken()
            <input type="hidden" name="FarmerID" value="@farmer.ID" />
            <input type="hidden" name="eid" value="@Model.ID" />
            <input type="hidden" name="now" value="@ViewBag.now" />
            <input type="hidden" name="Latitude" id="Latitude" />
            <input type="hidden" name="Longitude" id="Longitude" />
            <div class="container">
                @foreach (var question in Model.Questions.ToList().Shuffled().Take(population))
                {
                    <input type="hidden" name="QID" value="@question.ID" />
                    <div class="card shadow">
                        <div class="card-header">
                            <div class="form-inline">
                                <span class="badge badge-pill">Question @count</span>
                                <small class="ml-auto">[@question.Score]</small>
                            </div>
                        </div>
                        <div class="card-body">
                            @Html.Raw(question.Name)
                            @if (question.Answers.Any())
                            {
                                List<Answer> answers = question.Answers.ToList();
                                answers.Shuffled();
                                <table class="table table-sm table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>Suggestions</th>
                                            <th class="text-right">Check</th>
                                        </tr>
                                    </thead>
                                    <tbody id="data">
                                        @foreach (var a in answers)
                                        {
                                            <tr>
                                                <td>
                                                    <p>@Html.Raw(a.Name)</p>
                                                </td>
                                                <td class="text-right"><input type="checkbox" name="AID" value="@($"{question.ID}_{(int)a.ID}")" /></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                        </div>
                    </div>
                    <hr class="mt-3 mb-3" />
                    count++;
                }
                <div class="text-right mt-2">
                    @if (ViewBag.expired == null && ViewBag.done == null)
                    {
                        <button id="mybutton" class="btn btn-success btn-lg">Submit</button>
                    }
                </div>
            </div>
        }
    </div>
}
else
{
    <div id="quiz">
        <div id="quiz-header">
            <h1 class="font-weight-light" s>Examination</h1>
        </div>
        <div id="quiz-start-screen">
            <p><a href="#" id="quiz-start-btn" class="quiz-button">Start</a></p>
        </div>
    </div>
}

@section styles{
    <link href="~/Scripts/quizz/jquery.quiz-min.css" rel="stylesheet" />
}

@section Scripts{
    <script src="~/Scripts/quizz/jquery.quiz.js"></script>
    <script type="text/javascript">
        function checkOption(obj) {
            if (obj.checked) $(obj).parent().parent().addClass("bg-success");
            else $(obj).parent().parent().removeClass("bg-success");
            var checkedCount = $("input:checked[name='AID']").length;
            if (checkedCount > 0) {
                $("#btnSubmt").show({ duration: "fast" });
                if (checkedCount >= 1) $("#btnSubmt").html("Remove this!");
                else $("#btnSubmt").html("");
            }
            else $("#btnSubmt").hide({ duration: "fast" });
        }
        function startCountDown(timeLeft) {
            var interval = setInterval(countdown, 1000);
            update();
            function countdown() {
                if (--timeLeft > 0) {
                    update();
                }
                else {
                    clearInterval(interval);
                    update();
                    $("#answersDIV :input").attr("disabled", true);
                    completed();
                }
            }

            function update() {
                hours = Math.floor(timeLeft / 3600);
                minutes = Math.floor((timeLeft % 3600) / 60);
                seconds = timeLeft % 60;
                document.getElementById('time-left').innerHTML = '' + hours + ':' + minutes + ':' + seconds;
            }

            function ShowDialog() {
                let timerInterval
                Swal.fire({
                    title: 'Your time is up!',
                    html: 'Please wait.. your exercise will be submitted automatically.',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    timer: 2000,
                    onBeforeOpen: () => {
                        Swal.showLoading()
                        timerInterval = setInterval(() => {
                            Swal.getContent().querySelector('strong')
                                .textContent = Swal.getTimerLeft()
                        }, 100)
                    },
                    onClose: () => {
                        clearInterval(timerInterval)
                    }
                }).then(() => {
                    $("#myForm").submit();
                })
            }

            function completed() {
               @if (ViewBag.done == null || ViewBag.Attempts == null)
               {
                   @:ShowDialog();
                }
            }
        }

        $(document).ready(function () {
            $('#quiz').quiz({
                questions: @ViewBag.array,
            });

            @if(Model.TypeID == (int)ExaminationType.SHORT_EXERCISE || Model.TypeID == (int)ExaminationType.EXAMINATION)
            {
                if (Model.TimeToClose.TotalSeconds > 0) {
                @:startCountDown(@(Model.Duration*60));
                }
            }
             if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    $("#Latitude").val(position.coords.latitude);
                    $("#Longitude").val(position.coords.longitude);
                });
            }
        });
        function lookUp() {
            var checkedCount = $("input:checked[name='AID']").length;
        }

        function checkData(obj) {
            lookUp();
        }
    </script>
}


